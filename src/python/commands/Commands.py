import os
from phycas.utilities.PhycasCommand import *
from phycas.utilities.CommonFunctions import CommonFunctions

class Commands(PhycasCommand):
    def __init__(self):
        o = PhycasCommandOutputOptions()
        o.__dict__["_help_order"] = ["filename"]

        t = TextOutputSpec(prefix='phycas-command-reference', suffix=".txt", help_str="The document generated by this command.")
        o.__dict__["filename"] = t

        PhycasCommand.__init__(self, None, "commands", "Saves command reference to filename specified (phycas-command-reference.txt by default)", o)

        self.__dict__["cmdreff"] = None
        self.__dict__["cmdreff_filename"] = None
        self.__dict__["cf"] = None

    def hidden():
        """
        Overrides the PhycasCommand.hidden method to keep CmdRef's name from being displayed
        in the list of classes displayed when users type help. Delete this function, or
        change its return value to False, when it is ready to be advertised.
        """
        return False

    hidden = staticmethod(hidden)

    def checkSanity(self):
        """
        Place asserts in this function that should be checked before anything substantive
        is done during a call of a CmdRef object.
        """
        pass

    def _openCommandReferenceFile(self):
        #---+----|----+----|----+----|----+----|----+----|----+----|----+----|
        """
        Opens the output file.

        """
        self.cf.phycassert(self.cmdreff is None, 'Attempt made to open command reference file, but it is already open!')
        self.cmdreff_filename = self.cf.opts.out.filename._getFilename()
        try:
            self.cmdreff = self.cf.opts.out.filename.open(self.cf.stdout)
        except:
            print '*** Attempt to open command reference file (%s) failed.' % self.cmdreff_filename

        status = (self.cmdreff is not None) and (self.cmdreff)
        return status

    def _closeCommandReferenceFile(self):
        #---+----|----+----|----+----|----+----|----+----|----+----|----+----|
        """
        Closes the output file.

        """
        self.cf.phycassert(self.cmdreff is not None, 'Attempt made to close command reference file, but it is not open!')
        self.cmdreff.close()
        status = self.cmdreff.closed
        self.cmdreff = None
        return status

    def formatNameString(self, command_name):
        nasterisks_total = 80 - len(command_name) - 2
        asterisks_before = '*'*(nasterisks_total//2)
        asterisks_after = '*'*(nasterisks_total//2)
        if nasterisks_total % 2 == 1:
            asterisks_after += '*'
        return asterisks_before+' '+command_name+' '+asterisks_after

    def __call__(self, **kwargs):
        global _fixed_terminal_width

        self.set(**kwargs)
        c = copy.deepcopy(self)
        self.cf = CommonFunctions(c)

        ok = self._openCommandReferenceFile()
        if ok:
            # temporarily fix terminal width to 80 characters
            setFixedTerminalWidth(80)

            # loop through all phycas command classes and write current settings for each to file
            for cmd in PhycasHelp._phycas_cmd_classes:
                if not cmd.hidden():
                    c = cmd()
                    s = c.help.current()
                    command_name_string = self.formatNameString(c.help.cmd_name)
                    asterisks_full = '*'*80
                    self.cmdreff.write('\n\n%s\n%s\n%s\n' % (asterisks_full, command_name_string, asterisks_full))
                    self.cmdreff.write('%s\n' % s)
            self.cf.output('Command reference saved to the file %s' % self.cmdreff_filename)

            # return terminal width to None so that it can adapt to actual terminal width
            setFixedTerminalWidth(None)

            closed_ok = self._closeCommandReferenceFile()
            if not closed_ok:
                self.cf.output('An error was encountered: the command reference file %s could not be closed.' % self.cmdreff_filename)
        else:
            self.cf.output('Sorry, an error was encountered: the command reference file %s could not be created.' % self.cmdreff_filename)
